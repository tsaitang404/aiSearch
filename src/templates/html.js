/**
 * HTMLÊ®°Êùø
 * @version 1.0.0
 */

export const HTML_CONTENT = `<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NeoAI Êô∫ËÉΩÂØπËØù</title>
    <!-- MarkdownËß£ÊûêÂ∫ì -->
    <script src="https://cdn.jsdelivr.net/npm/marked@12.0.0/marked.min.js"></script>
    <!-- ‰ª£Á†ÅËØ≠Ê≥ïÈ´ò‰∫Æ -->
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-core.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism-tomorrow.min.css" rel="stylesheet">
    <style>
        /* Âü∫Êú¨Ê†∑ÂºèËÆæÁΩÆ */
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            height: 100vh;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            animation: backgroundShift 20s ease-in-out infinite;
        }

        @keyframes backgroundShift {
            0%, 100% { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
            50% { background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); }
        }

        /* È°∂ÈÉ®ÂØºËà™Ê†è */
        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            padding: 20px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header h1 {
            margin: 0;
            color: #2d3748;
            font-size: 24px;
            font-weight: 700;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .header h1::before {
            content: "ü§ñ";
            font-size: 28px;
            animation: bounce 2s infinite;
        }

        @keyframes bounce {
            0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
            40% { transform: translateY(-3px); }
            60% { transform: translateY(-2px); }
        }

        .model-indicator {
            display: flex;
            align-items: center;
            gap: 12px;
            font-size: 14px;
            color: #4a5568;
            background: rgba(255, 255, 255, 0.8);
            padding: 8px 16px;
            border-radius: 25px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.3);
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .model-indicator:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            background: rgba(255, 255, 255, 0.9);
        }

        .model-indicator:active {
            transform: translateY(0px);
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .model-badge {
            background: linear-gradient(135deg, #4CAF50, #45a049);
            color: white;
            padding: 4px 12px;
            border-radius: 20px;
            font-weight: 600;
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            box-shadow: 0 2px 8px rgba(76, 175, 80, 0.3);
            animation: pulse 3s infinite;
        }

        @keyframes pulse {
            0%, 100% { box-shadow: 0 2px 8px rgba(76, 175, 80, 0.3); }
            50% { box-shadow: 0 2px 15px rgba(76, 175, 80, 0.5); }
        }

        .model-badge.fallback {
            background: linear-gradient(135deg, #FF9800, #f57c00);
            box-shadow: 0 2px 8px rgba(255, 152, 0, 0.3);
        }

        /* ËÆæÁΩÆÊåâÈíÆ */
        .settings-btn {
            background: rgba(255, 255, 255, 0.9);
            border: none;
            cursor: pointer;
            padding: 12px;
            border-radius: 50%;
            color: #4a5568;
            transition: all 0.3s ease;
            font-size: 16px;
            width: 44px;
            height: 44px;
            display: flex;
            align-items: center;
            justify-content: center;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.3);
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .settings-btn:hover {
            background: rgba(255, 255, 255, 1);
            transform: rotate(90deg) scale(1.1);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        }

        /* Áî®Êà∑ÁïåÈù¢Ê†∑Âºè */
        .user-info {
            display: flex;
            align-items: center;
            gap: 10px;
            color: #2d3748;
            font-size: 14px;
        }

        .user-info .username {
            font-weight: 600;
        }

        .auth-buttons {
            display: flex;
            gap: 10px;
        }

        .auth-btn {
            padding: 8px 16px;
            border: none;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 5px;
        }

        .auth-btn.primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .auth-btn.secondary {
            background: rgba(255, 255, 255, 0.8);
            color: #2d3748;
            border: 1px solid rgba(0, 0, 0, 0.1);
        }

        .auth-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        /* ËÆ§ËØÅÊ®°ÊÄÅÊ°Ü */
        .auth-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            backdrop-filter: blur(5px);
        }

        .auth-modal.hidden {
            display: none;
        }

        .auth-form {
            background: white;
            border-radius: 20px;
            padding: 40px;
            max-width: 400px;
            width: 90%;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
            animation: modalSlideIn 0.3s ease-out;
        }

        @keyframes modalSlideIn {
            from {
                opacity: 0;
                transform: translateY(-50px) scale(0.9);
            }
            to {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }

        .auth-form h2 {
            text-align: center;
            margin-bottom: 30px;
            color: #2d3748;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: #4a5568;
            font-weight: 500;
        }

        .form-group input {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            font-size: 16px;
            transition: border-color 0.3s ease;
        }

        .form-group input:focus {
            outline: none;
            border-color: #667eea;
        }

        .form-buttons {
            display: flex;
            gap: 10px;
            margin-top: 30px;
        }

        .form-buttons button {
            flex: 1;
            padding: 12px;
            border: none;
            border-radius: 10px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .form-buttons .primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .form-buttons .secondary {
            background: #e2e8f0;
            color: #4a5568;
        }

        .form-buttons button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .error-message {
            background: #fed7d7;
            color: #c53030;
            padding: 10px;
            border-radius: 8px;
            margin-bottom: 20px;
            text-align: center;
        }

        .success-message {
            background: #c6f6d5;
            color: #2f855a;
            padding: 10px;
            border-radius: 8px;
            margin-bottom: 20px;
            text-align: center;
        }

        /* ËÅäÂ§©ÂÆπÂô® */
        .chat-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            max-width: 800px;
            margin: 0 auto;
            width: 100%;
            padding: 0 20px;
        }

        /* ËÅäÂ§©Ê∂àÊÅØÂå∫Âüü */
        .chat-messages {
            flex: 1;
            overflow-y: auto;
            overflow-x: hidden;
            padding: 20px 0;
            display: flex;
            flex-direction: column;
            gap: 20px;
            min-height: 0;
            max-height: calc(100vh - 200px);
            scroll-behavior: smooth;
        }

        /* Ëá™ÂÆö‰πâÊªöÂä®Êù°Ê†∑Âºè */
        .chat-messages::-webkit-scrollbar {
            width: 6px;
        }

        .chat-messages::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 3px;
        }

        .chat-messages::-webkit-scrollbar-thumb {
            background: rgba(255, 255, 255, 0.3);
            border-radius: 3px;
            transition: background 0.3s ease;
        }

        .chat-messages::-webkit-scrollbar-thumb:hover {
            background: rgba(255, 255, 255, 0.5);
        }

        /* Ê∂àÊÅØÊ†∑Âºè */
        .message {
            display: flex;
            gap: 15px;
            max-width: 85%;
            animation: messageSlideIn 0.5s ease-out;
            margin-bottom: 24px;
        }

        @keyframes messageSlideIn {
            from { 
                opacity: 0; 
                transform: translateY(20px) scale(0.95); 
            }
            to { 
                opacity: 1; 
                transform: translateY(0) scale(1); 
            }
        }

        .message.user {
            align-self: flex-end;
            flex-direction: row-reverse;
        }

        .message.assistant {
            align-self: flex-start;
        }

        .message-avatar {
            width: 42px;
            height: 42px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 700;
            font-size: 14px;
            flex-shrink: 0;
            box-shadow: 0 3px 15px rgba(0, 0, 0, 0.2);
            position: relative;
        }

        .message.user .message-avatar {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .message.user .message-avatar::after {
            content: '';
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea, #764ba2);
            opacity: 0.3;
            animation: avatarPulse 3s infinite;
        }

        @keyframes avatarPulse {
            0%, 100% { transform: scale(1); opacity: 0.3; }
            50% { transform: scale(1.1); opacity: 0.1; }
        }

        .message.assistant .message-avatar {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
        }

        .message-content {
            background: rgba(255, 255, 255, 0.95);
            padding: 16px 20px;
            border-radius: 20px;
            backdrop-filter: blur(15px);
            border: 1px solid rgba(255, 255, 255, 0.3);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            position: relative;
            line-height: 1.6;
            transition: all 0.3s ease;
            word-wrap: break-word;
        }

        .message-content:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 25px rgba(0, 0, 0, 0.15);
        }

        .message.user .message-content {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
        }

        .message.user .message-content:hover {
            box-shadow: 0 6px 25px rgba(102, 126, 234, 0.3);
        }

        .message.assistant .message-content {
            background: rgba(255, 255, 255, 0.98);
            color: #2d3748;
        }

        .message.assistant .message-content:hover {
            box-shadow: 0 6px 25px rgba(16, 185, 129, 0.2);
        }

        .message.assistant .message-content {
            background: #f8fafc;
            border: 1px solid #e2e8f0;
        }

        /* Ê∂àÊÅØÊó∂Èó¥Êà≥ */
        .message-time {
            font-size: 12px;
            color: #64748b;
            margin-top: 4px;
            text-align: right;
        }

        .message.assistant .message-time {
            text-align: left;
        }

        /* Êù•Ê∫ê‰ø°ÊÅØ */
        .message-sources {
            margin-top: 8px;
            font-size: 12px;
            color: #64748b;
            border-top: 1px solid #e2e8f0;
            padding-top: 8px;
        }

        .message-sources ul {
            list-style: none;
            margin: 4px 0 0 0;
        }

        .message-sources li {
            padding: 2px 0;
            position: relative;
            padding-left: 12px;
        }

        .message-sources li:before {
            content: "‚Ä¢";
            position: absolute;
            left: 0;
            color: #3b82f6;
        }

        /* Markdown ÂÜÖÂÆπÊ†∑Âºè */
        .message-content h1, 
        .message-content h2, 
        .message-content h3 {
            margin: 16px 0 8px 0;
            font-weight: 600;
            line-height: 1.4;
        }

        .message-content h1 {
            font-size: 1.5em;
            color: #1a202c;
            border-bottom: 2px solid #e2e8f0;
            padding-bottom: 8px;
        }

        .message-content h2 {
            font-size: 1.3em;
            color: #2d3748;
        }

        .message-content h3 {
            font-size: 1.1em;
            color: #4a5568;
        }

        /* ‰ª£Á†ÅÂùóÊ†∑Âºè */
        .code-block {
            position: relative;
            margin: 12px 0;
            border-radius: 8px;
            overflow: hidden;
            background: #1a1a1a;
            border: 1px solid #333;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .code-language {
            background: #333;
            color: #a0a0a0;
            padding: 6px 12px;
            font-size: 12px;
            font-weight: 500;
            border-bottom: 1px solid #444;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .code-block pre {
            margin: 0;
            padding: 16px;
            background: #1a1a1a;
            color: #e2e8f0;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 14px;
            line-height: 1.5;
            overflow-x: auto;
            white-space: pre-wrap;
            word-wrap: break-word;
        }

        .code-block code {
            background: transparent;
            color: inherit;
            padding: 0;
            border: none;
            font-size: inherit;
        }

        .copy-code-btn {
            position: absolute;
            top: 8px;
            right: 8px;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: #a0a0a0;
            padding: 6px 8px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.2s ease;
            backdrop-filter: blur(5px);
        }

        .copy-code-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            color: #fff;
            transform: scale(1.05);
        }

        .copy-code-btn:active {
            transform: scale(0.95);
        }

        /* ÂÜÖËÅî‰ª£Á†ÅÊ†∑Âºè */
        .inline-code {
            background: rgba(99, 102, 241, 0.1);
            color: #6366f1;
            padding: 2px 6px;
            border-radius: 4px;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 0.9em;
            border: 1px solid rgba(99, 102, 241, 0.2);
        }

        /* ÂàóË°®Ê†∑Âºè */
        .message-list {
            margin: 12px 0;
            padding-left: 20px;
        }

        .message-list li {
            margin: 4px 0;
            line-height: 1.6;
        }

        .message-list.ordered {
            list-style-type: decimal;
        }

        .message-list:not(.ordered) {
            list-style-type: disc;
        }

        .message-list li::marker {
            color: #6366f1;
            font-weight: bold;
        }

        /* ÂºïÁî®ÂùóÊ†∑Âºè */
        .message-content blockquote,
        .message-content .markdown-blockquote {
            margin: 12px 0;
            padding: 12px 16px;
            border-left: 4px solid #6366f1;
            background: rgba(99, 102, 241, 0.05);
            border-radius: 0 8px 8px 0;
            font-style: italic;
            color: #4a5568;
            position: relative;
        }

        .message-content .markdown-blockquote::before {
            content: '"';
            font-size: 3em;
            color: rgba(99, 102, 241, 0.2);
            position: absolute;
            top: -10px;
            left: 10px;
            font-family: Georgia, serif;
        }

        /* Â¢ûÂº∫Prism.js‰ª£Á†ÅÈ´ò‰∫ÆÊ†∑Âºè */
        .code-block pre[class*="language-"] {
            margin: 0;
            padding: 16px !important;
            background: #1a1a1a !important;
            color: #e2e8f0 !important;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace !important;
            font-size: 14px !important;
            line-height: 1.5 !important;
            overflow-x: auto;
            white-space: pre-wrap;
            word-wrap: break-word;
            border: none !important;
        }

        /* ÈíàÂØπ‰∏çÂêåËØ≠Ë®ÄÁöÑÁâπÊÆäÂ§ÑÁêÜ */
        .language-javascript .token.keyword,
        .language-js .token.keyword,
        .language-typescript .token.keyword,
        .language-ts .token.keyword {
            color: #c792ea !important;
        }

        .language-python .token.keyword {
            color: #ff5555 !important;
        }

        .language-json .token.property {
            color: #80cbc4 !important;
        }

        /* Ê∑ªÂä†Ë°åÂè∑ÊîØÊåÅÁöÑÊ†∑Âºè */
        .code-block pre.line-numbers {
            padding-left: 3.8em !important;
            counter-reset: linenumber;
        }

        .code-block pre.line-numbers > code {
            position: relative;
            white-space: inherit;
        }

        .code-block .line-numbers-rows {
            position: absolute;
            pointer-events: none;
            top: 0;
            font-size: 100%;
            left: -3.8em;
            width: 3em;
            letter-spacing: -1px;
            border-right: 1px solid #444;
            user-select: none;
        }

        /* Ê∞¥Âπ≥ÂàÜÂâ≤Á∫øÊ†∑Âºè */
        .message-content hr {
            margin: 20px 0;
            border: none;
            height: 1px;
            background: linear-gradient(90deg, transparent, #e2e8f0, transparent);
        }

        /* ÂõæÁâáÊ†∑Âºè */
        .message-content .message-image {
            max-width: 100%;
            height: auto;
            border-radius: 8px;
            margin: 12px 0;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            cursor: pointer;
        }

        .message-content .message-image:hover {
            transform: scale(1.02);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
        }

        /* ÂõæÁâáÂä†ËΩΩÂ§±Ë¥•Ê†∑Âºè */
        .message-content .message-image[alt]:after {
            content: " (ÂõæÁâá: " attr(alt) ")";
            color: #666;
            font-style: italic;
            display: block;
            text-align: center;
            padding: 20px;
            background: #f8fafc;
            border: 2px dashed #e2e8f0;
            border-radius: 8px;
        }

        /* Ë°®Ê†ºÊ†∑Âºè */
        .markdown-table {
            width: 100%;
            margin: 12px 0;
            border-collapse: collapse;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            background: #fff;
        }

        .markdown-table th,
        .markdown-table td {
            padding: 12px 16px;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
        }

        .markdown-table th {
            background: #f8fafc;
            font-weight: 600;
            color: #374151;
            border-bottom: 2px solid #d1d5db;
        }

        .markdown-table tr:hover {
            background: #f9fafb;
        }

        .markdown-table tr:last-child td {
            border-bottom: none;
        }

        /* ÈìæÊé•Ê†∑Âºè */
        .message-content a {
            color: #6366f1;
            text-decoration: none;
            border-bottom: 1px solid transparent;
            transition: all 0.2s ease;
        }

        .message-content a:hover {
            color: #4f46e5;
            border-bottom-color: #6366f1;
        }

        /* Âà†Èô§Á∫øÊ†∑Âºè */
        .message-content del {
            color: #9ca3af;
            text-decoration: line-through;
        }

        /* ËæìÂÖ•Âå∫Âüü */
        .chat-input-container {
            padding: 25px 20px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-top: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 25px 25px 0 0;
            position: sticky;
            bottom: 0;
            z-index: 100;
            box-shadow: 0 -4px 20px rgba(0, 0, 0, 0.1);
        }

        .chat-input-wrapper {
            display: flex;
            gap: 15px;
            align-items: flex-end;
            padding: 0;
            max-width: 800px;
            margin: 0 auto;
        }

        .chat-input {
            flex: 1;
            border: 2px solid rgba(255, 255, 255, 0.5);
            border-radius: 25px;
            padding: 16px 20px;
            font-size: 16px;
            outline: none;
            transition: all 0.3s ease;
            resize: none;
            min-height: 24px;
            max-height: 120px;
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            font-family: inherit;
            overflow-y: auto;
        }

        .chat-input:focus {
            border-color: #667eea;
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.3);
            transform: translateY(-2px);
        }

        .chat-input::placeholder {
            color: #a0aec0;
            font-style: italic;
        }

        .send-btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            border-radius: 50%;
            width: 52px;
            height: 52px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            flex-shrink: 0;
            font-size: 20px;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
            position: relative;
            overflow: hidden;
        }

        .send-btn::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            background: rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            transition: all 0.3s ease;
            transform: translate(-50%, -50%);
        }
        
        .send-btn:hover:not(:disabled) {
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 6px 25px rgba(102, 126, 234, 0.5);
        }

        .send-btn:hover:not(:disabled)::before {
            width: 100%;
            height: 100%;
        }

        .send-btn:active {
            transform: translateY(-1px) scale(1.02);
        }

        .send-btn:disabled {
            background: linear-gradient(135deg, #94a3b8, #64748b);
            cursor: not-allowed;
            box-shadow: 0 2px 8px rgba(148, 163, 184, 0.3);
        }

        /* Âä†ËΩΩÊåáÁ§∫Âô® */
        .typing-indicator {
            display: flex;
            align-items: center;
            gap: 15px;
            padding: 20px;
            margin: 10px 0;
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.3s ease;
        }

        .typing-indicator.show {
            opacity: 1;
            transform: translateY(0);
        }

        .typing-indicator .message-avatar {
            background: linear-gradient(135deg, #10b981, #059669);
            box-shadow: 0 3px 15px rgba(16, 185, 129, 0.3);
            animation: avatarPulse 2s infinite;
        }

        .typing-dots {
            display: flex;
            gap: 6px;
            padding: 12px 18px;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            backdrop-filter: blur(15px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .typing-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea, #764ba2);
            animation: typing 1.5s ease-in-out infinite;
        }

        .typing-dot:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-dot:nth-child(3) {
            animation-delay: 0.4s;
        }

        @keyframes typing {
            0%, 60%, 100% {
                transform: translateY(0);
                opacity: 0.4;
            }
            30% {
                transform: translateY(-8px);
                opacity: 1;
                background: linear-gradient(135deg, #10b981, #059669);
            }
        }

        /* ËÆæÁΩÆÈù¢Êùø */
        .settings-panel {
            position: fixed !important;
            top: 0 !important;
            right: -400px !important;
            width: 400px !important;
            height: 100vh !important;
            background: white !important;
            box-shadow: -4px 0 20px rgba(0, 0, 0, 0.15) !important;
            transition: right 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
            z-index: 10000 !important;
            overflow-y: auto !important;
            transform: translateZ(0) !important;
            margin: 0 !important;
            padding: 0 !important;
        }

        .settings-panel.show {
            right: 0 !important;
        }

        .settings-header {
            padding: 20px !important;
            border-bottom: 1px solid #e2e8f0 !important;
            display: flex !important;
            justify-content: space-between !important;
            align-items: center !important;
            background: #f8fafc !important;
        }

        .settings-header h3 {
            margin: 0 !important;
            color: #1e293b !important;
            font-size: 18px !important;
            font-weight: 600 !important;
        }

        .settings-content {
            padding: 20px !important;
            background: white !important;
        }

        .setting-group {
            margin-bottom: 24px !important;
        }

        .setting-group label {
            display: block !important;
            font-weight: 600 !important;
            color: #1e293b !important;
            margin-bottom: 8px !important;
            font-size: 14px !important;
        }

        .setting-group input,
        .setting-group select {
            width: 100% !important;
            padding: 8px 12px !important;
            border: 1px solid #d1d5db !important;
            border-radius: 6px !important;
            font-size: 14px !important;
            background: white !important;
            color: #1e293b !important;
        }

        .setting-group input[type="range"] {
            margin: 8px 0 !important;
            background: transparent !important;
            border: none !important;
        }

        .range-value {
            font-size: 12px !important;
            color: #64748b !important;
            margin-top: 4px !important;
        }

        .model-status {
            margin-top: 8px !important;
            font-size: 12px !important;
            color: #64748b !important;
            padding: 4px 8px !important;
            background: #f3f4f6 !important;
            border-radius: 4px !important;
        }

        /* ÂìçÂ∫îÂºèËÆæËÆ° */
        @media (max-width: 768px) {
            .settings-panel {
                width: 100vw;
                right: -100vw;
            }
            
            .settings-panel.show {
                right: 0;
            }
            
            .message {
                max-width: 95%;
                gap: 12px;
            }
            
            .message-avatar {
                width: 36px;
                height: 36px;
                font-size: 12px;
            }
            
            .header {
                padding: 15px 20px;
            }
            
            .header h1 {
                font-size: 20px;
            }
            
            .chat-container {
                padding: 0 15px;
            }
        }

        @media (max-width: 480px) {
            .header h1 {
                font-size: 18px;
            }
            
            .model-indicator {
                font-size: 12px;
                gap: 8px;
            }
            
            .message-content {
                padding: 12px 16px;
            }
            
            .chat-input-container {
                padding: 20px 0;
            }
        }

        /* ÈöêËóèÁ±ª */
        .hidden {
            display: none !important;
        }

        /* Ê¨¢ËøéÊ∂àÊÅØ */
        .welcome-message {
            text-align: center;
            padding: 60px 30px;
            color: rgba(255, 255, 255, 0.9);
            animation: welcomeFadeIn 1s ease-out;
            max-width: 600px;
            margin: 40px auto;
        }

        @keyframes welcomeFadeIn {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .welcome-message h2 {
            color: white;
            margin-bottom: 20px;
            font-size: 32px;
            font-weight: 700;
            text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 15px;
        }

        .welcome-message h2::before {
            content: "‚ú®";
            font-size: 36px;
            animation: sparkle 2s ease-in-out infinite;
        }

        @keyframes sparkle {
            0%, 100% { transform: rotate(0deg) scale(1); }
            50% { transform: rotate(180deg) scale(1.1); }
        }

        .welcome-message p {
            opacity: 0.95;
            font-size: 18px;
            line-height: 1.6;
            background: rgba(255, 255, 255, 0.1);
            padding: 20px 30px;
            border-radius: 20px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        }

        /* ËÆæÁΩÆË¶ÜÁõñÂ±Ç */
        .settings-overlay {
            position: fixed !important;
            top: 0 !important;
            left: 0 !important;
            width: 100% !important;
            height: 100vh !important;
            background: rgba(0, 0, 0, 0.5) !important;
            z-index: 9999 !important;
            opacity: 0 !important;
            visibility: hidden !important;
            transition: opacity 0.3s ease, visibility 0.3s ease !important;
            pointer-events: none !important;
        }

        .settings-overlay.show {
            opacity: 1 !important;
            visibility: visible !important;
            pointer-events: auto !important;
        }

        /* Â∫ïÈÉ®ÊåâÈíÆÊ†∑Âºè */
        .bottom-action-btn {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 60px;
            height: 60px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            border-radius: 50%;
            color: white;
            font-size: 24px;
            cursor: pointer;
            box-shadow: 0 4px 20px rgba(102, 126, 234, 0.3);
            transition: all 0.3s ease;
            z-index: 1000;
            display: none;
            align-items: center;
            justify-content: center;
            backdrop-filter: blur(10px);
            border: 2px solid rgba(255, 255, 255, 0.2);
        }

        .bottom-action-btn:hover {
            transform: translateY(-5px) scale(1.1);
            box-shadow: 0 8px 30px rgba(102, 126, 234, 0.4);
            background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);
        }

        .bottom-action-btn:active {
            transform: translateY(-3px) scale(1.05);
        }

        .bottom-action-btn.show {
            display: flex;
            animation: slideInUp 0.3s ease;
        }

        @keyframes slideInUp {
            from {
                transform: translateY(100px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        /* ÁßªÂä®Á´ØÂìçÂ∫îÂºè */
        @media (max-width: 768px) {
            .bottom-action-btn {
                width: 50px;
                height: 50px;
                bottom: 15px;
                right: 15px;
                font-size: 20px;
            }
        }

        /* Ê®°ÂûãÂàáÊç¢ÂºπÁ™ó */
        .model-switch-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100vh;
            background: rgba(0, 0, 0, 0.5);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 10000;
            backdrop-filter: blur(5px);
        }

        .model-switch-modal.show {
            display: flex;
            animation: fadeIn 0.3s ease;
        }

        .model-switch-content {
            background: white;
            border-radius: 20px;
            padding: 30px;
            max-width: 400px;
            width: 90%;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            animation: slideInScale 0.3s ease;
        }

        .model-switch-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f1f5f9;
        }

        .model-switch-header h3 {
            color: #2d3748;
            font-size: 18px;
            font-weight: 600;
            margin: 0;
        }

        .modal-close-btn {
            background: #ef4444;
            border: none;
            color: white;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            cursor: pointer;
            font-size: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
        }

        .modal-close-btn:hover {
            background: #dc2626;
            transform: scale(1.1);
        }

        .model-option {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 12px 16px;
            margin: 8px 0;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.2s ease;
            border: 2px solid transparent;
        }

        .model-option:hover {
            background: #f8fafc;
            border-color: #e2e8f0;
        }

        .model-option.active {
            background: #eff6ff;
            border-color: #3b82f6;
        }

        .model-option.active .model-option-badge {
            background: linear-gradient(135deg, #3b82f6, #1d4ed8);
        }

        .model-option-info {
            display: flex;
            flex-direction: column;
            flex: 1;
        }

        .model-option-name {
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 2px;
        }

        .model-option-desc {
            font-size: 12px;
            color: #64748b;
        }

        .model-option-badge {
            background: linear-gradient(135deg, #64748b, #475569);
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 10px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        #modelSwitchOptions {
            max-height: 400px;
            overflow-y: auto;
            overflow-x: hidden;
            scrollbar-width: thin;
            scrollbar-color: #cbd5e1 #f1f5f9;
        }

        #modelSwitchOptions::-webkit-scrollbar {
            width: 6px;
        }

        #modelSwitchOptions::-webkit-scrollbar-track {
            background: #f1f5f9;
            border-radius: 3px;
        }

        #modelSwitchOptions::-webkit-scrollbar-thumb {
            background: #cbd5e1;
            border-radius: 3px;
            transition: all 0.2s ease;
        }

        #modelSwitchOptions::-webkit-scrollbar-thumb:hover {
            background: #94a3b8;
        }

        .model-features {
            display: flex;
            flex-wrap: wrap;
            gap: 4px;
            margin-top: 6px;
        }

        .model-feature-tag {
            background: linear-gradient(135deg, #f1f5f9, #e2e8f0);
            color: #475569;
            padding: 2px 6px;
            border-radius: 8px;
            font-size: 9px;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.3px;
            border: 1px solid #e2e8f0;
            transition: all 0.2s ease;
        }

        .model-option:hover .model-feature-tag {
            background: linear-gradient(135deg, #e2e8f0, #cbd5e1);
            color: #334155;
        }

        .model-option.active .model-feature-tag {
            background: linear-gradient(135deg, #dbeafe, #bfdbfe);
            color: #1d4ed8;
            border-color: #3b82f6;
        }

        /* ÁâπÊÆäÁâπÊÄßÊ†áÁ≠æÈ¢úËâ≤ */
        .model-feature-tag:nth-child(1) {
            background: linear-gradient(135deg, #fef3c7, #fed7aa);
            color: #d97706;
        }

        .model-feature-tag:nth-child(2) {
            background: linear-gradient(135deg, #dcfce7, #bbf7d0);
            color: #16a34a;
        }

        .model-feature-tag:nth-child(3) {
            background: linear-gradient(135deg, #fae8ff, #f3e8ff);
            color: #a855f7;
        }

        .model-feature-tag:nth-child(4) {
            background: linear-gradient(135deg, #ecfdf5, #d1fae5);
            color: #059669;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="header-left">
            <h1>NeoAI Êô∫ËÉΩÂØπËØù</h1>
            <div class="model-indicator">
                <span>ÂΩìÂâçÊ®°Âûã:</span>
                <span class="model-badge" id="currentModelBadge">AutoRAG</span>
            </div>
        </div>
        <div class="header-right">
            <!-- Â∑≤ÁôªÂΩïÁî®Êà∑‰ø°ÊÅØ -->
            <div id="userInfo" class="user-info hidden">
                <span>üëã ÊÇ®Â•Ω, <span class="username" id="username"></span></span>
                <button class="auth-btn secondary" id="logoutBtn">ÁôªÂá∫</button>
            </div>
            <!-- Êú™ÁôªÂΩïÊó∂ÁöÑÊåâÈíÆ -->
            <div id="authButtons" class="auth-buttons">
                <button class="auth-btn secondary" id="loginBtn">ÁôªÂΩï</button>
                <button class="auth-btn primary" id="registerBtn">Ê≥®ÂÜå</button>
            </div>
            <button class="settings-btn" id="settingsBtn" title="ËÆæÁΩÆ">
                ‚öôÔ∏è
            </button>
        </div>
    </div>

    <!-- ÁôªÂΩïÊ®°ÊÄÅÊ°Ü -->
    <div id="loginModal" class="auth-modal hidden">
        <div class="auth-form">
            <h2>Áî®Êà∑ÁôªÂΩï</h2>
            <div id="loginError" class="error-message hidden"></div>
            <div id="loginSuccess" class="success-message hidden"></div>
            <form id="loginForm">
                <div class="form-group">
                    <label for="loginIdentifier">Áî®Êà∑ÂêçÊàñÈÇÆÁÆ±</label>
                    <input type="text" id="loginIdentifier" name="identifier" required>
                </div>
                <div class="form-group">
                    <label for="loginPassword">ÂØÜÁ†Å</label>
                    <input type="password" id="loginPassword" name="password" required>
                </div>
                <div class="form-buttons">
                    <button type="button" class="secondary" id="loginCancelBtn">ÂèñÊ∂à</button>
                    <button type="submit" class="primary">ÁôªÂΩï</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Ê≥®ÂÜåÊ®°ÊÄÅÊ°Ü -->
    <div id="registerModal" class="auth-modal hidden">
        <div class="auth-form">
            <h2>Áî®Êà∑Ê≥®ÂÜå</h2>
            <div id="registerError" class="error-message hidden"></div>
            <div id="registerSuccess" class="success-message hidden"></div>
            <form id="registerForm">
                <div class="form-group">
                    <label for="registerUsername">Áî®Êà∑Âêç</label>
                    <input type="text" id="registerUsername" name="username" required 
                           placeholder="3-20‰∏™Â≠óÁ¨¶ÔºåÂè™ËÉΩÂåÖÂê´Â≠óÊØç„ÄÅÊï∞Â≠ó„ÄÅ‰∏ãÂàíÁ∫ø">
                </div>
                <div class="form-group">
                    <label for="registerEmail">ÈÇÆÁÆ±</label>
                    <input type="email" id="registerEmail" name="email" required>
                </div>
                <div class="form-group">
                    <label for="registerPassword">ÂØÜÁ†Å</label>
                    <input type="password" id="registerPassword" name="password" required 
                           placeholder="Ëá≥Â∞ë6‰ΩçÔºåÂåÖÂê´Â≠óÊØçÂíåÊï∞Â≠ó">
                </div>
                <div class="form-buttons">
                    <button type="button" class="secondary" id="registerCancelBtn">ÂèñÊ∂à</button>
                    <button type="submit" class="primary">Ê≥®ÂÜå</button>
                </div>
            </form>
        </div>
    </div>

    <div class="chat-container">
        <div class="chat-messages" id="chatMessages">
            <div class="welcome-message">
                <h2>Ê¨¢Ëøé‰ΩøÁî® NeoAI</h2>
                <p>ÊàëÊòØÊÇ®ÁöÑÊô∫ËÉΩÂä©ÊâãÔºåÂèØ‰ª•ÂõûÁ≠îÈóÆÈ¢ò„ÄÅÂçèÂä©ÊÄùËÄÉÂíåÊèê‰æõ‰ø°ÊÅØ„ÄÇÊúâ‰ªÄ‰πàÊàëÂèØ‰ª•Â∏ÆÊÇ®ÁöÑÂêóÔºü</p>
            </div>
        </div>

        <div class="typing-indicator" id="typingIndicator">
            <div class="message-avatar">
                <span>AI</span>
            </div>
            <div class="typing-dots">
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
            </div>
            <span>Ê≠£Âú®ÊÄùËÄÉ‰∏≠...</span>
        </div>

        <div class="chat-input-container">
            <div class="chat-input-wrapper">
                <textarea id="chatInput" class="chat-input" placeholder="ËæìÂÖ•ÊÇ®ÁöÑÊ∂àÊÅØ..." rows="1"></textarea>
                <button id="sendBtn" class="send-btn" title="ÂèëÈÄÅ">
                    ‚û§
                </button>
            </div>
        </div>
    </div>

    <!-- ËÆæÁΩÆË¶ÜÁõñÂ±Ç -->
    <div class="settings-overlay" id="settingsOverlay"></div>

    <!-- ËÆæÁΩÆÈù¢Êùø -->
    <div class="settings-panel" id="settingsPanel">
        <div class="settings-header">
            <h3>ÂØπËØùËÆæÁΩÆ</h3>
            <button class="settings-btn" id="closeSettingsBtn" title="ÂÖ≥Èó≠">
                ‚úï
            </button>
        </div>
        <div class="settings-content">
            <div class="setting-group">
                <label for="useAutoRAG">‰ΩøÁî®AutoRAG:</label>
                <select id="useAutoRAG">
                    <option value="true">ÊòØ (‰ºòÂÖà‰ΩøÁî®AutoRAG)</option>
                    <option value="false">Âê¶ (Áõ¥Êé•‰ΩøÁî®ÂõûËêΩÊ®°Âûã)</option>
                </select>
            </div>
            <div class="setting-group">
                <label for="fallbackModel">ÂõûËêΩÊ®°Âûã:</label>
                <select id="fallbackModel">
                    <option value="@cf/meta/llama-2-7b-chat-int8">Llama 2 7B (ÈªòËÆ§)</option>
                </select>
                <div class="model-status">
                    Ê≠£Âú®Âä†ËΩΩÊ®°ÂûãÂàóË°®...
                </div>
            </div>
            <div class="setting-group">
                <label for="temperature">ÂàõÈÄ†ÊÄß (Temperature):</label>
                <input type="range" id="temperature" min="0" max="1" step="0.1" value="0.7">
                <div class="range-value">ÂΩìÂâçÂÄº: <span id="temperatureValue">0.7</span></div>
            </div>
            <div class="setting-group">
                <label for="maxTokens">ÊúÄÂ§ßÁîüÊàêÈïøÂ∫¶:</label>
                <input type="number" id="maxTokens" value="500" min="1" max="2000">
            </div>
        </div>
    </div>

    <!-- Â∫ïÈÉ®ÂõûÂà∞Â∫ïÈÉ®ÊåâÈíÆ -->
    <button class="bottom-action-btn" id="scrollToBottomBtn" title="ÂõûÂà∞Â∫ïÈÉ®">
        ‚Üì
    </button>

    <!-- Ê®°ÂûãÂàáÊç¢ÂºπÁ™ó -->
    <div class="model-switch-modal" id="modelSwitchModal">
        <div class="model-switch-content">
            <div class="model-switch-header">
                <h3>ÈÄâÊã©Ê®°Âûã</h3>
                <button class="modal-close-btn" id="closeModelSwitchBtn" title="ÂÖ≥Èó≠">
                    ‚úï
                </button>
            </div>
            <div id="modelSwitchOptions">
                <!-- Ê®°ÂûãÈÄâÈ°πÂ∞ÜÈÄöËøá JavaScript Âä®ÊÄÅÁîüÊàê -->
            </div>
        </div>
    </div>

    <script>
        /**
         * NeoAI ÂâçÁ´ØJavaScript - ÂÜÖÂµåÁâàÊú¨
         * @version 1.0.0
         */

        // ÂÖ®Â±ÄÂèòÈáè
        let isLoading = false;
        let currentUser = null; // ÂΩìÂâçÁôªÂΩïÁî®Êà∑‰ø°ÊÅØ
        let currentSettings = {
            useAutoRAG: true,
            fallbackModel: '@cf/meta/llama-2-7b-chat-int8',
            temperature: 0.7,
            maxTokens: 500
        };

        // DOMÂÖÉÁ¥†ÂºïÁî®
        let chatMessages, chatInput, sendBtn, typingIndicator;
        let settingsPanel, settingsBtn, closeSettingsBtn, settingsOverlay;
        let currentModelBadge, useAutoRAGSelect, fallbackModelSelect;
        let temperatureSlider, temperatureValue, maxTokensInput;
        let scrollToBottomBtn, modelIndicator, modelSwitchModal, closeModelSwitchBtn;
        
        // ËÆ§ËØÅÁõ∏ÂÖ≥DOMÂÖÉÁ¥†
        let userInfo, authButtons, loginBtn, registerBtn, logoutBtn;
        let loginModal, registerModal, loginForm, registerForm;
        let loginError, loginSuccess, registerError, registerSuccess;

        /**
         * ÂàùÂßãÂåñÂ∫îÁî®
         */
        document.addEventListener('DOMContentLoaded', function() {
            console.log('È°µÈù¢DOMÂä†ËΩΩÂÆåÊàêÔºåÂºÄÂßãÂàùÂßãÂåñÂ∫îÁî®...');
            initializeElements();
            setupEventListeners();
            loadSettings();
            loadModels();
            setupAutoResize();
            setupImageClickHandlers();
            initializeMarkdown();
            checkUserAuth(); // Ê£ÄÊü•Áî®Êà∑ÁôªÂΩïÁä∂ÊÄÅ
            console.log('Â∫îÁî®ÂàùÂßãÂåñÂÆåÊàê');
        });

        /**
         * ÂàùÂßãÂåñMarkdownËß£ÊûêÂô®
         */
        function initializeMarkdown() {
            // Á≠âÂæÖmarked.jsÂä†ËΩΩÂÆåÊàê
            if (typeof marked === 'undefined') {
                setTimeout(initializeMarkdown, 100);
                return;
            }

            // ÈÖçÁΩÆPrism.jsÔºàÂ¶ÇÊûúÂèØÁî®Ôºâ
            if (typeof Prism !== 'undefined') {
                // ËÆæÁΩÆPrism.jsËá™Âä®Âä†ËΩΩÂô®
                if (Prism.plugins && Prism.plugins.autoloader) {
                    Prism.plugins.autoloader.languages_path = 'https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/';
                }
                
                // Á¶ÅÁî®Ëá™Âä®È´ò‰∫ÆÔºàÊàë‰ª¨‰ºöÊâãÂä®ÊéßÂà∂Ôºâ
                Prism.manual = true;
                
                // Ê∑ªÂä†Ëá™ÂÆö‰πâËØ≠Ë®ÄÂà´Âêç
                if (Prism.languages) {
                    // JavaScriptÂà´Âêç
                    if (Prism.languages.javascript) {
                        Prism.languages.js = Prism.languages.javascript;
                    }
                    
                    // TypeScriptÂà´Âêç
                    if (Prism.languages.typescript) {
                        Prism.languages.ts = Prism.languages.typescript;
                    }
                    
                    // PythonÂà´Âêç
                    if (Prism.languages.python) {
                        Prism.languages.py = Prism.languages.python;
                    }
                }
            }

            console.log('MarkdownËß£ÊûêÂô®ÂàùÂßãÂåñÂÆåÊàê');
        }

        /**
         * ÂàùÂßãÂåñDOMÂÖÉÁ¥†ÂºïÁî®
         */
        function initializeElements() {
            chatMessages = document.getElementById('chatMessages');
            chatInput = document.getElementById('chatInput');
            sendBtn = document.getElementById('sendBtn');
            typingIndicator = document.getElementById('typingIndicator');
            
            settingsPanel = document.getElementById('settingsPanel');
            settingsBtn = document.getElementById('settingsBtn');
            closeSettingsBtn = document.getElementById('closeSettingsBtn');
            settingsOverlay = document.getElementById('settingsOverlay');
            
            currentModelBadge = document.getElementById('currentModelBadge');
            useAutoRAGSelect = document.getElementById('useAutoRAG');
            fallbackModelSelect = document.getElementById('fallbackModel');
            temperatureSlider = document.getElementById('temperature');
            temperatureValue = document.getElementById('temperatureValue');
            maxTokensInput = document.getElementById('maxTokens');
            
            // ÂõûÂà∞Â∫ïÈÉ®ÊåâÈíÆ
            scrollToBottomBtn = document.getElementById('scrollToBottomBtn');
            
            // Ê®°ÂûãÂàáÊç¢Áõ∏ÂÖ≥ÂÖÉÁ¥†
            modelIndicator = document.querySelector('.model-indicator');
            modelSwitchModal = document.getElementById('modelSwitchModal');
            closeModelSwitchBtn = document.getElementById('closeModelSwitchBtn');
            
            // ËÆ§ËØÅÁõ∏ÂÖ≥ÂÖÉÁ¥†
            userInfo = document.getElementById('userInfo');
            authButtons = document.getElementById('authButtons');
            loginBtn = document.getElementById('loginBtn');
            registerBtn = document.getElementById('registerBtn');
            logoutBtn = document.getElementById('logoutBtn');
            
            loginModal = document.getElementById('loginModal');
            registerModal = document.getElementById('registerModal');
            loginForm = document.getElementById('loginForm');
            registerForm = document.getElementById('registerForm');
            
            loginError = document.getElementById('loginError');
            loginSuccess = document.getElementById('loginSuccess');
            registerError = document.getElementById('registerError');
            registerSuccess = document.getElementById('registerSuccess');
        }

        /**
         * ËÆæÁΩÆ‰∫ã‰ª∂ÁõëÂê¨Âô®
         */
        function setupEventListeners() {
            // ÂèëÈÄÅÊåâÈíÆÁÇπÂáª‰∫ã‰ª∂
            sendBtn.addEventListener('click', handleSendMessage);
            
            // ÂõûËΩ¶ÈîÆÂèëÈÄÅÊ∂àÊÅØ
            chatInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    handleSendMessage();
                }
            });
            
            // ËÆæÁΩÆÈù¢Êùø‰∫ã‰ª∂
            settingsBtn.addEventListener('click', openSettings);
            closeSettingsBtn.addEventListener('click', closeSettings);
            settingsOverlay.addEventListener('click', closeSettings);
            
            // ËÆæÁΩÆÂèòÊõ¥‰∫ã‰ª∂
            useAutoRAGSelect.addEventListener('change', updateSettings);
            fallbackModelSelect.addEventListener('change', updateSettings);
            temperatureSlider.addEventListener('input', updateTemperature);
            maxTokensInput.addEventListener('change', updateSettings);
            
            // ÂõûÂà∞Â∫ïÈÉ®ÊåâÈíÆ‰∫ã‰ª∂
            scrollToBottomBtn.addEventListener('click', scrollToBottomSmooth);
            
            // ÁõëÂê¨ËÅäÂ§©Âå∫ÂüüÊªöÂä®‰∫ã‰ª∂ÔºåÊéßÂà∂ÊåâÈíÆÊòæÁ§∫
            chatMessages.addEventListener('scroll', handleChatScroll);
            
            // Ê®°ÂûãÊåáÁ§∫Âô®ÁÇπÂáª‰∫ã‰ª∂
            modelIndicator.addEventListener('click', showModelSwitchModal);
            
            // Ê®°ÂûãÂàáÊç¢ÂºπÁ™ó‰∫ã‰ª∂
            closeModelSwitchBtn.addEventListener('click', closeModelSwitchModal);
            modelSwitchModal.addEventListener('click', function(e) {
                if (e.target === modelSwitchModal) {
                    closeModelSwitchModal();
                }
            });
            
            // ËÆ§ËØÅÁõ∏ÂÖ≥‰∫ã‰ª∂ÁõëÂê¨
            setupAuthEventListeners();
        }

        /**
         * ËÆæÁΩÆËÆ§ËØÅÁõ∏ÂÖ≥‰∫ã‰ª∂ÁõëÂê¨Âô®
         */
        function setupAuthEventListeners() {
            // ÁôªÂΩïÊåâÈíÆ
            if (loginBtn) {
                loginBtn.addEventListener('click', showLoginModal);
            }
            
            // Ê≥®ÂÜåÊåâÈíÆ
            if (registerBtn) {
                registerBtn.addEventListener('click', showRegisterModal);
            }
            
            // ÁôªÂá∫ÊåâÈíÆ
            if (logoutBtn) {
                logoutBtn.addEventListener('click', handleLogout);
            }
            
            // ÁôªÂΩïË°®ÂçïÊèê‰∫§
            if (loginForm) {
                loginForm.addEventListener('submit', handleLogin);
            }
            
            // Ê≥®ÂÜåË°®ÂçïÊèê‰∫§
            if (registerForm) {
                registerForm.addEventListener('submit', handleRegister);
            }
            
            // Ê®°ÊÄÅÊ°ÜÂÖ≥Èó≠‰∫ã‰ª∂
            setupModalCloseEvents();
        }

        /**
         * ËÆæÁΩÆÊ®°ÊÄÅÊ°ÜÂÖ≥Èó≠‰∫ã‰ª∂
         */
        function setupModalCloseEvents() {
            // ÁôªÂΩïÊ®°ÊÄÅÊ°ÜÂÖ≥Èó≠
            const loginCancelBtn = document.getElementById('loginCancelBtn');
            if (loginCancelBtn) {
                loginCancelBtn.addEventListener('click', hideLoginModal);
            }
            
            // Ê≥®ÂÜåÊ®°ÊÄÅÊ°ÜÂÖ≥Èó≠
            const registerCancelBtn = document.getElementById('registerCancelBtn');
            if (registerCancelBtn) {
                registerCancelBtn.addEventListener('click', hideRegisterModal);
            }
            
            // ÁÇπÂáªÊ®°ÊÄÅÊ°ÜËÉåÊôØÂÖ≥Èó≠
            if (loginModal) {
                loginModal.addEventListener('click', function(e) {
                    if (e.target === loginModal) {
                        hideLoginModal();
                    }
                });
            }
            
            if (registerModal) {
                registerModal.addEventListener('click', function(e) {
                    if (e.target === registerModal) {
                        hideRegisterModal();
                    }
                });
            }
            
            // ESCÈîÆÂÖ≥Èó≠Ê®°ÊÄÅÊ°Ü
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    hideLoginModal();
                    hideRegisterModal();
                }
            });
        }

        /**
         * ËÆæÁΩÆËæìÂÖ•Ê°ÜËá™Âä®Ë∞ÉÊï¥È´òÂ∫¶
         */
        function setupAutoResize() {
            chatInput.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = Math.min(this.scrollHeight, 120) + 'px';
            });
        }

        /**
         * Â§ÑÁêÜÂèëÈÄÅÊ∂àÊÅØ
         */
        async function handleSendMessage() {
            const message = chatInput.value.trim();
            if (!message || isLoading) return;
            
            // Á¶ÅÁî®ËæìÂÖ•ÂíåÊåâÈíÆ
            setLoading(true);
            
            // Ê∑ªÂä†Áî®Êà∑Ê∂àÊÅØ
            addMessage('user', message);
            
            // Ê∏ÖÁ©∫ËæìÂÖ•Ê°Ü
            chatInput.value = '';
            chatInput.style.height = 'auto';
            
            // ÊòæÁ§∫ÊâìÂ≠óÊåáÁ§∫Âô®
            showTypingIndicator();
            
            try {
                // ÂèëÈÄÅAPIËØ∑Ê±Ç
                const response = await fetch('/api/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        message: message,
                        useAutoRAG: currentSettings.useAutoRAG,
                        fallbackModel: currentSettings.fallbackModel,
                        temperature: currentSettings.temperature,
                        maxTokens: currentSettings.maxTokens
                    })
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    // Ê∑ªÂä†AIÂõûÂ§ç
                    addMessage('assistant', data.response, null, data.sources, data.model);
                    updateModelBadge(data.model);
                } else {
                    // ÊòæÁ§∫ÈîôËØØÊ∂àÊÅØ
                    addMessage('assistant', 'Êä±Ê≠âÔºåÂ§ÑÁêÜÊÇ®ÁöÑËØ∑Ê±ÇÊó∂Âá∫Áé∞‰∫ÜÈîôËØØÔºö' + data.error, null, [], 'ÈîôËØØ');
                }
                
            } catch (error) {
                console.error('ÂèëÈÄÅÊ∂àÊÅØÂ§±Ë¥•:', error);
                addMessage('assistant', 'Êä±Ê≠âÔºåÁΩëÁªúËøûÊé•Âá∫Áé∞ÈóÆÈ¢òÔºåËØ∑Á®çÂêéÂÜçËØï„ÄÇ', null, [], 'ÈîôËØØ');
            }
            
            // ÈöêËóèÊâìÂ≠óÊåáÁ§∫Âô®
            hideTypingIndicator();
            
            // ÈáçÊñ∞ÂêØÁî®ËæìÂÖ•
            setLoading(false);
        }

        /**
         * Ê∑ªÂä†Ê∂àÊÅØÂà∞ËÅäÂ§©ÁïåÈù¢
         * @param {string} role - Ê∂àÊÅØËßíËâ≤ ('user' Êàñ 'assistant')
         * @param {string} content - Ê∂àÊÅØÂÜÖÂÆπ
         * @param {Date|null} timestamp - Ê∂àÊÅØÊó∂Èó¥Êà≥ÔºàÂèØÈÄâÔºâ
         * @param {Array} sources - Êù•Ê∫ê‰ø°ÊÅØÔºàÂèØÈÄâÔºâ
         * @param {string} model - Ê®°Âûã‰ø°ÊÅØÔºàÂèØÈÄâÔºâ
         */
        function addMessage(role, content, timestamp = null, sources = [], model = '') {
            // ÁßªÈô§Ê¨¢ËøéÊ∂àÊÅØ
            const welcomeMessage = document.querySelector('.welcome-message');
            if (welcomeMessage) {
                welcomeMessage.remove();
            }
            
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message ' + role;
            
            const avatar = document.createElement('div');
            avatar.className = 'message-avatar';
            avatar.textContent = role === 'user' ? 'ÊÇ®' : 'AI';
            
            const messageContent = document.createElement('div');
            messageContent.className = 'message-content';
            
            // Â§ÑÁêÜÊ∂àÊÅØÂÜÖÂÆπÔºàÊîØÊåÅÂÆåÊï¥ÁöÑMarkdownÔºâ
            const processedContent = processMessageContent(content);
            messageContent.innerHTML = processedContent;
            
            // ÂØπ‰ª£Á†ÅÂùóËøõË°åËØ≠Ê≥ïÈ´ò‰∫ÆÂ§ÑÁêÜ
            if (typeof Prism !== 'undefined') {
                const codeBlocks = messageContent.querySelectorAll('pre code[class*="language-"]');
                codeBlocks.forEach(block => {
                    try {
                        Prism.highlightElement(block);
                    } catch (error) {
                        console.warn('‰ª£Á†ÅÈ´ò‰∫ÆÂ§±Ë¥•:', error);
                    }
                });
            }
            
            // Ê∑ªÂä†Êó∂Èó¥Êà≥
            const timeDiv = document.createElement('div');
            timeDiv.className = 'message-time';
            const displayTime = timestamp || new Date();
            timeDiv.textContent = displayTime.toLocaleTimeString('zh-CN', {
                hour: '2-digit',
                minute: '2-digit'
            });
            
            messageDiv.appendChild(avatar);
            const contentWrapper = document.createElement('div');
            contentWrapper.appendChild(messageContent);
            contentWrapper.appendChild(timeDiv);
            
            // Ê∑ªÂä†Êù•Ê∫ê‰ø°ÊÅØÔºàÂ¶ÇÊûúÊúâÔºâ
            if (sources && sources.length > 0) {
                const sourcesDiv = document.createElement('div');
                sourcesDiv.className = 'message-sources';
                sourcesDiv.innerHTML = '<strong>ÂèÇËÄÉÊù•Ê∫ê:</strong><ul>' + 
                    sources.map(source => '<li>' + escapeHtml(source) + '</li>').join('') + 
                    '</ul>';
                contentWrapper.appendChild(sourcesDiv);
            }
            
            messageDiv.appendChild(contentWrapper);
            chatMessages.appendChild(messageDiv);
            
            // ÊªöÂä®Âà∞Â∫ïÈÉ®
            scrollToBottom();
        }

        /**
         * Â§ÑÁêÜÊ∂àÊÅØÂÜÖÂÆπÔºà‰ΩøÁî®marked.jsËß£ÊûêMarkdownÔºâ
         */
        function processMessageContent(content) {
            // ÈÖçÁΩÆmarkedÈÄâÈ°π
            marked.setOptions({
                highlight: function(code, lang) {
                    // Â¶ÇÊûúPrism.jsÂ∑≤Âä†ËΩΩ‰∏îÊîØÊåÅËØ•ËØ≠Ë®ÄÔºå‰ΩøÁî®ËØ≠Ê≥ïÈ´ò‰∫Æ
                    if (typeof Prism !== 'undefined' && Prism.languages[lang]) {
                        return Prism.highlight(code, Prism.languages[lang], lang);
                    }
                    return escapeHtml(code);
                },
                langPrefix: 'language-',
                breaks: true,  // ÊîØÊåÅGitHubÈ£éÊ†ºÁöÑÊç¢Ë°å
                gfm: true,     // ÂêØÁî®GitHubÈ£éÊ†ºÁöÑMarkdown
                tables: true,  // ÊîØÊåÅË°®Ê†º
                sanitize: false,  // ÂÖÅËÆ∏HTMLÔºàÊàë‰ª¨Á®çÂêé‰ºöÊâãÂä®Ê∏ÖÁêÜÔºâ
                smartLists: true,
                smartypants: false,
                xhtml: false
            });

            // Ëá™ÂÆö‰πâÊ∏≤ÊüìÂô®
            const renderer = new marked.Renderer();
            
            // Ëá™ÂÆö‰πâ‰ª£Á†ÅÂùóÊ∏≤Êüì
            renderer.code = function(code, language, escaped) {
                const validLanguage = language && language.match(/^[a-zA-Z0-9_+-]*$/);
                const langClass = validLanguage ? 'language-' + language : 'language-text';
                const langDisplay = validLanguage ? language.toUpperCase() : 'TEXT';
                
                return '<div class="code-block">' +
                    '<div class="code-language">' + langDisplay + '</div>' +
                    '<pre><code class="' + langClass + '">' + (escaped ? code : escapeHtml(code)) + '</code></pre>' +
                    '<button class="copy-code-btn" onclick="copyToClipboard(this)" title="Â§çÂà∂‰ª£Á†Å">üìã</button>' +
                '</div>';
            };

            // Ëá™ÂÆö‰πâÂÜÖËÅî‰ª£Á†ÅÊ∏≤Êüì
            renderer.codespan = function(code) {
                return '<code class="inline-code">' + escapeHtml(code) + '</code>';
            };

            // Ëá™ÂÆö‰πâË°®Ê†ºÊ∏≤Êüì
            renderer.table = function(header, body) {
                return '<table class="markdown-table">' +
                    '<thead>' + header + '</thead>' +
                    '<tbody>' + body + '</tbody>' +
                '</table>';
            };

            // Ëá™ÂÆö‰πâÈìæÊé•Ê∏≤ÊüìÔºàÊ∑ªÂä†ÂÆâÂÖ®Â±ûÊÄßÔºâ
            renderer.link = function(href, title, text) {
                // È™åËØÅÈìæÊé•ÂÆâÂÖ®ÊÄß
                const isExternal = href.startsWith('http://') || href.startsWith('https://');
                const titleAttr = title ? ' title="' + escapeHtml(title) + '"' : '';
                const targetAttr = isExternal ? ' target="_blank" rel="noopener noreferrer"' : '';
                
                return '<a href="' + escapeHtml(href) + '"' + titleAttr + targetAttr + '>' + text + '</a>';
            };

            // Ëá™ÂÆö‰πâÂõæÁâáÊ∏≤Êüì
            renderer.image = function(href, title, text) {
                const titleAttr = title ? ' title="' + escapeHtml(title) + '"' : '';
                const altAttr = text ? ' alt="' + escapeHtml(text) + '"' : '';
                
                return '<img src="' + escapeHtml(href) + '" class="message-image" loading="lazy"' + titleAttr + altAttr + '>';
            };

            // Ëá™ÂÆö‰πâÂºïÁî®ÂùóÊ∏≤Êüì
            renderer.blockquote = function(quote) {
                return '<blockquote class="markdown-blockquote">' + quote + '</blockquote>';
            };

            // ‰ΩøÁî®Ëá™ÂÆö‰πâÊ∏≤ÊüìÂô®
            marked.setOptions({ renderer: renderer });

            try {
                // ‰ΩøÁî®marked.jsËß£ÊûêMarkdown
                let html = marked.parse(content);
                
                // ÂêéÂ§ÑÁêÜÔºöÊ∑ªÂä†ÂàóË°®Ê†∑ÂºèÁ±ª
                html = html.replace(/<ul>/g, '<ul class="message-list">');
                html = html.replace(/<ol>/g, '<ol class="message-list ordered">');
                
                return html;
            } catch (error) {
                console.error('MarkdownËß£ÊûêÈîôËØØ:', error);
                // Â¶ÇÊûúËß£ÊûêÂ§±Ë¥•ÔºåÂõûÈÄÄÂà∞ÁÆÄÂçïÁöÑHTMLËΩ¨‰πâ
                return escapeHtml(content).replace(/\\n/g, '<br>');
            }
        }

        /**
         * Â§çÂà∂‰ª£Á†ÅÂà∞Ââ™Ë¥¥Êùø
         */
        window.copyToClipboard = function(button) {
            const codeBlock = button.closest('.code-block');
            const codeElement = codeBlock.querySelector('code');
            const text = codeElement.textContent;
            
            navigator.clipboard.writeText(text).then(() => {
                // ‰∏¥Êó∂ÊîπÂèòÊåâÈíÆÊñáÊú¨‰ª•ÊòæÁ§∫ÂèçÈ¶à
                const originalText = button.textContent;
                button.textContent = '‚úì';
                button.style.background = '#4CAF50';
                
                setTimeout(() => {
                    button.textContent = originalText;
                    button.style.background = '';
                }, 2000);
            }).catch(err => {
                console.error('Â§çÂà∂Â§±Ë¥•:', err);
                // ÊòæÁ§∫ÈîôËØØÂèçÈ¶à
                const originalText = button.textContent;
                button.textContent = '‚úó';
                button.style.background = '#f44336';
                
                setTimeout(() => {
                    button.textContent = originalText;
                    button.style.background = '';
                }, 2000);
            });
        };

        /**
         * ÂõæÁâáÁÇπÂáªÊîæÂ§ßÂäüËÉΩ
         */
        function setupImageClickHandlers() {
            document.addEventListener('click', function(e) {
                if (e.target.classList.contains('message-image')) {
                    const imgSrc = e.target.src;
                    const imgAlt = e.target.alt;
                    
                    // ÂàõÂª∫Ê®°ÊÄÅÊ°Ü
                    const modal = document.createElement('div');
                    modal.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.8); display: flex; justify-content: center; align-items: center; z-index: 10000; cursor: pointer;';
                    
                    const img = document.createElement('img');
                    img.src = imgSrc;
                    img.alt = imgAlt;
                    img.style.cssText = 'max-width: 90%; max-height: 90%; border-radius: 8px; box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);';
                    
                    modal.appendChild(img);
                    document.body.appendChild(modal);
                    
                    // ÁÇπÂáªÊ®°ÊÄÅÊ°ÜÂÖ≥Èó≠
                    modal.addEventListener('click', () => {
                        document.body.removeChild(modal);
                    });
                    
                    // ESCÈîÆÂÖ≥Èó≠
                    const escHandler = (event) => {
                        if (event.key === 'Escape') {
                            document.body.removeChild(modal);
                            document.removeEventListener('keydown', escHandler);
                        }
                    };
                    document.addEventListener('keydown', escHandler);
                }
            });
        }

        /**
         * HTMLËΩ¨‰πâ
         */
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        /**
         * ÊòæÁ§∫ÊâìÂ≠óÊåáÁ§∫Âô®
         */
        function showTypingIndicator() {
            typingIndicator.classList.add('show');
            scrollToBottom();
        }

        /**
         * ÈöêËóèÊâìÂ≠óÊåáÁ§∫Âô®
         */
        function hideTypingIndicator() {
            typingIndicator.classList.remove('show');
        }

        /**
         * ÊªöÂä®Âà∞Â∫ïÈÉ®
         */
        function scrollToBottom() {
            setTimeout(() => {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }, 100);
        }

        /**
         * ËÆæÁΩÆÂä†ËΩΩÁä∂ÊÄÅ
         */
        function setLoading(loading) {
            isLoading = loading;
            sendBtn.disabled = loading;
            chatInput.disabled = loading;
            
            if (loading) {
                chatInput.placeholder = 'Ê≠£Âú®Â§ÑÁêÜ‰∏≠...';
                sendBtn.style.opacity = '0.6';
            } else {
                chatInput.placeholder = 'ËæìÂÖ•ÊÇ®ÁöÑÊ∂àÊÅØ...';
                sendBtn.style.opacity = '1';
                chatInput.focus();
            }
        }

        /**
         * Êõ¥Êñ∞Ê®°ÂûãÊ†áËØÜ
         */
        function updateModelBadge(model) {
            if (!currentModelBadge) return;
            
            currentModelBadge.textContent = model === 'AutoRAG' ? 'AutoRAG' : getModelDisplayName(model);
            currentModelBadge.className = 'model-badge ' + (model === 'AutoRAG' ? '' : 'fallback');
        }

        /**
         * Ëé∑ÂèñÊ®°ÂûãÊòæÁ§∫ÂêçÁß∞
         */
        function getModelDisplayName(model) {
            const displayNames = {
                '@cf/meta/llama-2-7b-chat-int8': 'Llama 2 7B',
                '@cf/microsoft/DialoGPT-medium': 'DialoGPT',
                '@cf/huggingface/CodeBERTa-small-v1': 'CodeBERTa'
            };
            return displayNames[model] || model.split('/').pop();
        }

        /**
         * ÊâìÂºÄËÆæÁΩÆÈù¢Êùø
         */
        function openSettings() {
            settingsPanel.classList.add('show');
            settingsOverlay.classList.add('show');
            document.body.style.overflow = 'hidden';
        }

        /**
         * ÂÖ≥Èó≠ËÆæÁΩÆÈù¢Êùø
         */
        function closeSettings() {
            settingsPanel.classList.remove('show');
            settingsOverlay.classList.remove('show');
            document.body.style.overflow = '';
        }

        /**
         * Êõ¥Êñ∞Ê∏©Â∫¶ÂÄºÊòæÁ§∫
         */
        function updateTemperature() {
            const value = temperatureSlider.value;
            temperatureValue.textContent = value;
            currentSettings.temperature = parseFloat(value);
            saveSettings();
        }

        /**
         * Êõ¥Êñ∞ËÆæÁΩÆ
         */
        function updateSettings() {
            currentSettings.useAutoRAG = useAutoRAGSelect.value === 'true';
            currentSettings.fallbackModel = fallbackModelSelect.value;
            currentSettings.maxTokens = parseInt(maxTokensInput.value);
            
            saveSettings();
            updateModelBadge(currentSettings.useAutoRAG ? 'AutoRAG' : currentSettings.fallbackModel);
        }

        /**
         * Âä†ËΩΩËÆæÁΩÆ
         */
        function loadSettings() {
            try {
                const saved = localStorage.getItem('neoai-settings');
                if (saved) {
                    currentSettings = { ...currentSettings, ...JSON.parse(saved) };
                }
            } catch (error) {
                console.warn('Âä†ËΩΩËÆæÁΩÆÂ§±Ë¥•:', error);
            }
            
            // Â∫îÁî®Âà∞UI
            if (useAutoRAGSelect) useAutoRAGSelect.value = currentSettings.useAutoRAG.toString();
            if (fallbackModelSelect) fallbackModelSelect.value = currentSettings.fallbackModel;
            if (temperatureSlider) {
                temperatureSlider.value = currentSettings.temperature;
                temperatureValue.textContent = currentSettings.temperature;
            }
            if (maxTokensInput) maxTokensInput.value = currentSettings.maxTokens;
            
            updateModelBadge(currentSettings.useAutoRAG ? 'AutoRAG' : currentSettings.fallbackModel);
        }

        /**
         * ‰øùÂ≠òËÆæÁΩÆ
         */
        function saveSettings() {
            try {
                localStorage.setItem('neoai-settings', JSON.stringify(currentSettings));
            } catch (error) {
                console.warn('‰øùÂ≠òËÆæÁΩÆÂ§±Ë¥•:', error);
            }
        }

        /**
         * Âä†ËΩΩÂèØÁî®Ê®°Âûã
         */
        async function loadModels() {
            try {
                const response = await fetch('/api/models');
                if (response.ok) {
                    const data = await response.json();
                    updateModelOptions(data.models || []);
                }
            } catch (error) {
                console.warn('Âä†ËΩΩÊ®°ÂûãÂàóË°®Â§±Ë¥•:', error);
            }
        }

        /**
         * Êõ¥Êñ∞Ê®°ÂûãÈÄâÈ°π
         */
        function updateModelOptions(models) {
            if (!fallbackModelSelect) return;
            
            // Ê∏ÖÁ©∫Áé∞ÊúâÈÄâÈ°π
            fallbackModelSelect.innerHTML = '';
            
            // Ê∑ªÂä†Ê®°ÂûãÈÄâÈ°π
            models.forEach(model => {
                const option = document.createElement('option');
                option.value = model.name || model;
                option.textContent = getModelDisplayName(model.name || model);
                if (model.available === false) {
                    option.textContent += ' (‰∏çÂèØÁî®)';
                    option.disabled = true;
                }
                fallbackModelSelect.appendChild(option);
            });
            
            // ËÆæÁΩÆÂΩìÂâçÈÄâ‰∏≠ÁöÑÊ®°Âûã
            if (currentSettings.fallbackModel) {
                fallbackModelSelect.value = currentSettings.fallbackModel;
            }
            
            // Êõ¥Êñ∞Áä∂ÊÄÅÊòæÁ§∫
            const statusDiv = fallbackModelSelect.parentElement.querySelector('.model-status');
            if (statusDiv) {
                const availableCount = models.filter(m => m.available !== false).length;
                statusDiv.textContent = \`ÊâæÂà∞ \${models.length} ‰∏™Ê®°ÂûãÔºåÂÖ∂‰∏≠ \${availableCount} ‰∏™ÂèØÁî®\`;
            }
        }

        /**
         * Â§ÑÁêÜËÅäÂ§©Âå∫ÂüüÊªöÂä®‰∫ã‰ª∂
         */
        function handleChatScroll() {
            if (!scrollToBottomBtn || !chatMessages) return;
            
            const { scrollTop, scrollHeight, clientHeight } = chatMessages;
            const isNearBottom = scrollTop + clientHeight >= scrollHeight - 100; // Ë∑ùÁ¶ªÂ∫ïÈÉ®100pxÂÜÖÁÆó‰ΩúÂú®Â∫ïÈÉ®
            
            if (isNearBottom) {
                scrollToBottomBtn.classList.remove('show');
            } else {
                scrollToBottomBtn.classList.add('show');
            }
        }

        /**
         * ÈÄöËøáÊåâÈíÆÊªöÂä®Âà∞Â∫ïÈÉ®ÔºàÂπ≥ÊªëÊªöÂä®Ôºâ
         */
        function scrollToBottomSmooth() {
            if (!chatMessages) return;
            
            chatMessages.scrollTo({
                top: chatMessages.scrollHeight,
                behavior: 'smooth'
            });
            
            // ÈöêËóèÂõûÂà∞Â∫ïÈÉ®ÊåâÈíÆ
            if (scrollToBottomBtn) {
                scrollToBottomBtn.classList.remove('show');
            }
        }

        /**
         * ÊòæÁ§∫Ê®°ÂûãÂàáÊç¢ÂºπÁ™ó
         */
        async function showModelSwitchModal() {
            modelSwitchModal.classList.add('show');
            document.body.style.overflow = 'hidden';
            await generateModelOptions();
        }

        /**
         * ÂÖ≥Èó≠Ê®°ÂûãÂàáÊç¢ÂºπÁ™ó
         */
        function closeModelSwitchModal() {
            modelSwitchModal.classList.remove('show');
            document.body.style.overflow = '';
        }

        /**
         * ÁîüÊàêÊ®°ÂûãÈÄâÈ°π
         */
        async function generateModelOptions() {
            const optionsContainer = document.getElementById('modelSwitchOptions');
            if (!optionsContainer) return;

            // ÊòæÁ§∫Âä†ËΩΩÁä∂ÊÄÅ
            optionsContainer.innerHTML = '<div style="text-align: center; padding: 20px; color: #64748b;">Ê≠£Âú®Âä†ËΩΩÊ®°ÂûãÂàóË°®...</div>';

            try {
                // Ëé∑ÂèñÂèØÁî®Ê®°ÂûãÂàóË°®
                const response = await fetch('/api/models');
                let availableModels = [];
                
                if (response.ok) {
                    const data = await response.json();
                    availableModels = data.models || [];
                }

                // ÊûÑÂª∫Ê®°ÂûãÂàóË°®ÔºàÂßãÁªàÂåÖÂê´AutoRAGÔºâ
                const models = [
                    {
                        name: 'AutoRAG',
                        desc: 'Êô∫ËÉΩÊ£ÄÁ¥¢Â¢ûÂº∫ÁîüÊàê',
                        type: 'AutoRAG',
                        available: true
                    },
                    ...availableModels.map(model => ({
                        name: getModelDisplayName(model.name || model),
                        desc: getModelDescription(model.name || model),
                        type: model.name || model,
                        available: model.available !== false
                    }))
                ];

                const currentModel = getActiveModel();

                optionsContainer.innerHTML = models.map(model => {
                    const features = getModelFeatures(model.type);
                    const featureHtml = features.map(feature => \`<span class="model-feature-tag">\${feature}</span>\`).join('');
                    
                    return \`
                    <div class="model-option \${currentModel === model.type ? 'active' : ''} \${!model.available ? 'disabled' : ''}" 
                         data-model="\${model.type}" 
                         onclick="\${model.available ? \`selectModel('\${model.type}')\` : ''}">
                        <div class="model-option-info">
                            <div class="model-option-name">\${model.name}</div>
                            <div class="model-option-desc">\${model.desc}</div>
                            <div class="model-features">
                                \${featureHtml}
                            </div>
                        </div>
                        <div class="model-option-badge">
                            \${model.available ? 'ÂèØÁî®' : '‰∏çÂèØÁî®'}
                        </div>
                    </div>
                    \`;
                }).join('');

            } catch (error) {
                console.warn('Âä†ËΩΩÊ®°ÂûãÂàóË°®Â§±Ë¥•:', error);
                // Â¶ÇÊûúAPIË∞ÉÁî®Â§±Ë¥•ÔºåÊòæÁ§∫Âü∫Êú¨Ê®°ÂûãÈÄâÈ°π
                const fallbackModels = [
                    {
                        name: 'AutoRAG',
                        desc: 'Êô∫ËÉΩÊ£ÄÁ¥¢Â¢ûÂº∫ÁîüÊàê',
                        type: 'AutoRAG',
                        available: true
                    },
                    {
                        name: 'Llama 2 7B',
                        desc: 'MetaÂºÄÊ∫êÂ§ßËØ≠Ë®ÄÊ®°Âûã',
                        type: '@cf/meta/llama-2-7b-chat-int8',
                        available: true
                    }
                ];

                const currentModel = getActiveModel();
                optionsContainer.innerHTML = fallbackModels.map(model => {
                    const features = getModelFeatures(model.type);
                    const featureHtml = features.map(feature => \`<span class="model-feature-tag">\${feature}</span>\`).join('');
                    
                    return \`
                    <div class="model-option \${currentModel === model.type ? 'active' : ''}" 
                         data-model="\${model.type}" 
                         onclick="selectModel('\${model.type}')">
                        <div class="model-option-info">
                            <div class="model-option-name">\${model.name}</div>
                            <div class="model-option-desc">\${model.desc}</div>
                            <div class="model-features">
                                \${featureHtml}
                            </div>
                        </div>
                        <div class="model-option-badge">ÂèØÁî®</div>
                    </div>
                    \`;
                }).join('');
            }
        }

        /**
         * Ëé∑ÂèñÊ®°ÂûãÊòæÁ§∫ÂêçÁß∞
         */
        function getModelDisplayName(modelType) {
            const modelNames = {
                'AutoRAG': 'AutoRAG',
                '@cf/meta/llama-2-7b-chat-int8': 'Llama 2 7B',
                '@cf/mistral/mistral-7b-instruct-v0.1': 'Mistral 7B',
                '@cf/google/gemma-2b-it': 'Gemma 2B',
                '@cf/microsoft/phi-2': 'Phi-2',
                '@cf/openchat/openchat-3.5-0106': 'OpenChat 3.5',
                '@cf/tiiuae/falcon-7b-instruct': 'Falcon 7B',
                '@cf/thebloke/codellama-7b-instruct-awq': 'CodeLlama 7B'
            };
            return modelNames[modelType] || modelType;
        }

        /**
         * Ëé∑ÂèñÊ®°ÂûãÊèèËø∞
         */
        function getModelDescription(modelType) {
            const modelDescriptions = {
                'AutoRAG': 'Êô∫ËÉΩÊ£ÄÁ¥¢Â¢ûÂº∫ÁîüÊàê',
                '@cf/meta/llama-2-7b-chat-int8': 'MetaÂºÄÊ∫êÂ§ßËØ≠Ë®ÄÊ®°Âûã',
                '@cf/mistral/mistral-7b-instruct-v0.1': 'Mistral AI Êåá‰ª§Ë∞É‰ºòÊ®°Âûã',
                '@cf/google/gemma-2b-it': 'Google Gemma ËΩªÈáèÁ∫ßÊ®°Âûã',
                '@cf/microsoft/phi-2': 'Microsoft È´òÊïàÂ∞èÂûãÊ®°Âûã',
                '@cf/openchat/openchat-3.5-0106': 'OpenChat ÂºÄÊ∫êÂØπËØùÊ®°Âûã',
                '@cf/tiiuae/falcon-7b-instruct': 'TII UAE Falcon Êåá‰ª§Ê®°Âûã',
                '@cf/thebloke/codellama-7b-instruct-awq': 'CodeLlama ‰ª£Á†ÅÁîüÊàêÊ®°Âûã',
                '@cf/meta/llama-3.1-8b-instruct': 'Llama 3.1 8B Êåá‰ª§Ê®°Âûã',
                '@cf/meta/llama-3-8b-instruct': 'Llama 3 8B Êåá‰ª§Ê®°Âûã',
                '@cf/stability-ai/stable-diffusion-xl-base-1.0': 'Stable Diffusion XL ÂõæÂÉèÁîüÊàê',
                '@cf/black-forest-labs/flux-1-schnell': 'Flux Âø´ÈÄüÂõæÂÉèÁîüÊàê',
                '@cf/lykon/dreamshaper-8-lcm': 'DreamShaper ÂõæÂÉèÁîüÊàê',
                '@cf/runwayml/stable-diffusion-v1-5-img2img': 'Stable Diffusion ÂõæÂÉèËΩ¨Êç¢',
                '@cf/huggingface/CodeBERTa-small-v1': 'CodeBERTa ‰ª£Á†ÅÁêÜËß£',
                '@cf/openai/whisper-tiny.en': 'Whisper ËØ≠Èü≥ËØÜÂà´'
            };
            return modelDescriptions[modelType] || 'Â§ßËØ≠Ë®ÄÊ®°Âûã';
        }

        /**
         * Ëé∑ÂèñÊ®°ÂûãÁâπÊÄßÊ†áÁ≠æ
         */
        function getModelFeatures(modelType) {
            const modelFeatures = {
                'AutoRAG': ['Êô∫ËÉΩÊ£ÄÁ¥¢', 'RAGÂ¢ûÂº∫', 'Áü•ËØÜÂ∫ì'],
                '@cf/meta/llama-2-7b-chat-int8': ['ÂØπËØù', 'ÈÄöÁî®'],
                '@cf/mistral/mistral-7b-instruct-v0.1': ['Êåá‰ª§‰ºòÂåñ', 'Êé®ÁêÜ'],
                '@cf/google/gemma-2b-it': ['ËΩªÈáèÁ∫ß', 'Âø´ÈÄü'],
                '@cf/microsoft/phi-2': ['Â∞èÂûã', 'È´òÊïà', 'Êé®ÁêÜ'],
                '@cf/openchat/openchat-3.5-0106': ['ÂºÄÊ∫ê', 'ÂØπËØù'],
                '@cf/tiiuae/falcon-7b-instruct': ['Êåá‰ª§'],
                '@cf/thebloke/codellama-7b-instruct-awq': ['‰ª£Á†ÅÁîüÊàê', 'ÁºñÁ®ã', 'ÂáΩÊï∞Ë∞ÉÁî®'],
                '@cf/meta/llama-3.1-8b-instruct': ['Ê∑±Â∫¶ÊÄùËÄÉ', 'Êé®ÁêÜ', 'ÂáΩÊï∞Ë∞ÉÁî®'],
                '@cf/meta/llama-3-8b-instruct': ['Êé®ÁêÜ', 'ÂØπËØù'],
                '@cf/stability-ai/stable-diffusion-xl-base-1.0': ['ÂõæÂÉèÁîüÊàê', 'Â§öÊ®°ÊÄÅ', 'SDXL'],
                '@cf/black-forest-labs/flux-1-schnell': ['ÂõæÂÉèÁîüÊàê', 'Âø´ÈÄü', 'È´òË¥®Èáè'],
                '@cf/lykon/dreamshaper-8-lcm': ['ÂõæÂÉèÁîüÊàê', 'Ëâ∫ÊúØÈ£éÊ†º'],
                '@cf/runwayml/stable-diffusion-v1-5-img2img': ['ÂõæÂÉèËΩ¨Êç¢', 'ÂõæÂÉèÁºñËæë', 'Â§öÊ®°ÊÄÅ'],
                '@cf/huggingface/CodeBERTa-small-v1': ['‰ª£Á†ÅÁêÜËß£', 'ËØ≠‰πâÂàÜÊûê'],
                '@cf/openai/whisper-tiny.en': ['ËØ≠Èü≥ËØÜÂà´', 'Â§öÊ®°ÊÄÅ', 'Ëã±Êñá']
            };
            return modelFeatures[modelType] || ['ÈÄöÁî®'];
        }

        /**
         * Ëé∑ÂèñÂΩìÂâçÊøÄÊ¥ªÁöÑÊ®°Âûã
         */
        function getActiveModel() {
            return currentSettings.useAutoRAG ? 'AutoRAG' : currentSettings.fallbackModel;
        }

        /**
         * ÈÄâÊã©Ê®°Âûã
         */
        function selectModel(modelType) {
            if (modelType === 'AutoRAG') {
                currentSettings.useAutoRAG = true;
            } else {
                currentSettings.useAutoRAG = false;
                currentSettings.fallbackModel = modelType;
            }

            // Êõ¥Êñ∞ËÆæÁΩÆUI
            if (useAutoRAGSelect) useAutoRAGSelect.value = currentSettings.useAutoRAG.toString();
            if (fallbackModelSelect) fallbackModelSelect.value = currentSettings.fallbackModel;

            // Êõ¥Êñ∞Ê®°ÂûãÊ†áËØÜ
            updateModelBadge(modelType === 'AutoRAG' ? 'AutoRAG' : modelType);

            // ‰øùÂ≠òËÆæÁΩÆ
            saveSettings();

            // ÂÖ≥Èó≠ÂºπÁ™ó
            closeModelSwitchModal();
        }

        // ==================== ËÆ§ËØÅÁõ∏ÂÖ≥ÂáΩÊï∞ ====================

        /**
         * Ê£ÄÊü•Áî®Êà∑ËÆ§ËØÅÁä∂ÊÄÅ
         */
        async function checkUserAuth() {
            try {
                console.log('Ê£ÄÊü•Áî®Êà∑ËÆ§ËØÅÁä∂ÊÄÅ...');
                const response = await fetch('/api/auth/profile', {
                    method: 'GET',
                    credentials: 'include'
                });

                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        console.log('Áî®Êà∑Â∑≤ÁôªÂΩï:', data.user.username);
                        currentUser = data.user;
                        await updateAuthUI(true);
                        return;
                    }
                }
                
                // Áî®Êà∑Êú™ÁôªÂΩï
                console.log('Áî®Êà∑Êú™ÁôªÂΩï');
                currentUser = null;
                updateAuthUI(false);
            } catch (error) {
                console.log('ËÆ§ËØÅÁä∂ÊÄÅÊ£ÄÊü•Â§±Ë¥•:', error);
                updateAuthUI(false);
            }
        }

        /**
         * Êõ¥Êñ∞ËÆ§ËØÅUIÁä∂ÊÄÅ
         * @param {boolean} isLoggedIn - ÊòØÂê¶Â∑≤ÁôªÂΩï
         */
        async function updateAuthUI(isLoggedIn) {
            if (isLoggedIn && currentUser) {
                // Â∑≤ÁôªÂΩïÁä∂ÊÄÅ
                userInfo.classList.remove('hidden');
                authButtons.classList.add('hidden');
                document.getElementById('username').textContent = currentUser.username;
                
                // Âä†ËΩΩÁî®Êà∑ÁöÑÂéÜÂè≤ËÅäÂ§©ËÆ∞ÂΩï
                await loadChatHistory();
            } else {
                // Êú™ÁôªÂΩïÁä∂ÊÄÅ
                userInfo.classList.add('hidden');
                authButtons.classList.remove('hidden');
                
                // Ê∏ÖÈô§ÂéÜÂè≤ËÆ∞ÂΩïÔºåÂè™‰øùÁïôÊ¨¢ËøéÊ∂àÊÅØ
                clearChatHistory();
            }
        }

        /**
         * ÊòæÁ§∫ÁôªÂΩïÊ®°ÊÄÅÊ°Ü
         */
        function showLoginModal() {
            clearAuthMessages();
            loginModal.classList.remove('hidden');
            document.getElementById('loginIdentifier').focus();
        }

        /**
         * ÈöêËóèÁôªÂΩïÊ®°ÊÄÅÊ°Ü
         */
        function hideLoginModal() {
            loginModal.classList.add('hidden');
            clearAuthMessages();
            loginForm.reset();
        }

        /**
         * ÊòæÁ§∫Ê≥®ÂÜåÊ®°ÊÄÅÊ°Ü
         */
        function showRegisterModal() {
            clearAuthMessages();
            registerModal.classList.remove('hidden');
            document.getElementById('registerUsername').focus();
        }

        /**
         * ÈöêËóèÊ≥®ÂÜåÊ®°ÊÄÅÊ°Ü
         */
        function hideRegisterModal() {
            registerModal.classList.add('hidden');
            clearAuthMessages();
            registerForm.reset();
        }

        /**
         * Ê∏ÖÈô§ËÆ§ËØÅÊ∂àÊÅØ
         */
        function clearAuthMessages() {
            [loginError, loginSuccess, registerError, registerSuccess].forEach(el => {
                if (el) {
                    el.classList.add('hidden');
                    el.textContent = '';
                }
            });
        }

        /**
         * ÊòæÁ§∫ËÆ§ËØÅÈîôËØØÊ∂àÊÅØ
         * @param {HTMLElement} element - ÈîôËØØÂÖÉÁ¥†
         * @param {string} message - ÈîôËØØÊ∂àÊÅØ
         */
        function showAuthError(element, message) {
            element.textContent = message;
            element.classList.remove('hidden');
        }

        /**
         * ÊòæÁ§∫ËÆ§ËØÅÊàêÂäüÊ∂àÊÅØ
         * @param {HTMLElement} element - ÊàêÂäüÂÖÉÁ¥†
         * @param {string} message - ÊàêÂäüÊ∂àÊÅØ
         */
        function showAuthSuccess(element, message) {
            element.textContent = message;
            element.classList.remove('hidden');
        }

        /**
         * Â§ÑÁêÜÁî®Êà∑ÁôªÂΩï
         * @param {Event} event - Ë°®ÂçïÊèê‰∫§‰∫ã‰ª∂
         */
        async function handleLogin(event) {
            event.preventDefault();
            clearAuthMessages();

            const formData = new FormData(loginForm);
            const data = {
                identifier: formData.get('identifier'),
                password: formData.get('password')
            };

            try {
                const response = await fetch('/api/auth/login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify(data)
                });

                const result = await response.json();

                if (result.success) {
                    showAuthSuccess(loginSuccess, result.message);
                    currentUser = result.user;
                    setTimeout(() => {
                        hideLoginModal();
                        updateAuthUI(true);
                    }, 1500);
                } else {
                    showAuthError(loginError, result.error);
                }
            } catch (error) {
                console.error('ÁôªÂΩïÂ§±Ë¥•:', error);
                showAuthError(loginError, 'ÁôªÂΩïÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•');
            }
        }

        /**
         * Â§ÑÁêÜÁî®Êà∑Ê≥®ÂÜå
         * @param {Event} event - Ë°®ÂçïÊèê‰∫§‰∫ã‰ª∂
         */
        async function handleRegister(event) {
            event.preventDefault();
            clearAuthMessages();

            const formData = new FormData(registerForm);
            const data = {
                username: formData.get('username'),
                email: formData.get('email'),
                password: formData.get('password')
            };

            try {
                const response = await fetch('/api/auth/register', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                const result = await response.json();

                if (result.success) {
                    showAuthSuccess(registerSuccess, result.message + 'ÔºåËØ∑ÁôªÂΩï');
                    setTimeout(() => {
                        hideRegisterModal();
                        showLoginModal();
                    }, 1500);
                } else {
                    showAuthError(registerError, result.error);
                }
            } catch (error) {
                console.error('Ê≥®ÂÜåÂ§±Ë¥•:', error);
                showAuthError(registerError, 'Ê≥®ÂÜåÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•');
            }
        }

        /**
         * Â§ÑÁêÜÁî®Êà∑ÁôªÂá∫
         */
        async function handleLogout() {
            try {
                const response = await fetch('/api/auth/logout', {
                    method: 'POST',
                    credentials: 'include'
                });

                // Êó†ËÆ∫ËØ∑Ê±ÇÊòØÂê¶ÊàêÂäüÔºåÈÉΩÊ∏ÖÈô§Êú¨Âú∞Áä∂ÊÄÅ
                currentUser = null;
                updateAuthUI(false);
                
                // ÂèØ‰ª•ÈÄâÊã©Âà∑Êñ∞È°µÈù¢Êù•Ê∏ÖÁêÜÊâÄÊúâÁä∂ÊÄÅ
                // window.location.reload();
                
            } catch (error) {
                console.error('ÁôªÂá∫Â§±Ë¥•:', error);
                // Âç≥‰ΩøÁôªÂá∫ËØ∑Ê±ÇÂ§±Ë¥•Ôºå‰πüÊ∏ÖÈô§Êú¨Âú∞Áä∂ÊÄÅ
                currentUser = null;
                updateAuthUI(false);
            }
        }

        /**
         * Ëé∑ÂèñÂ∏¶ËÆ§ËØÅ‰ø°ÊÅØÁöÑËØ∑Ê±ÇÂ§¥
         * @returns {Object} ËØ∑Ê±ÇÂ§¥ÂØπË±°
         */
        function getAuthHeaders() {
            const headers = {
                'Content-Type': 'application/json'
            };
            
            // Â¶ÇÊûúÁî®Êà∑Â∑≤ÁôªÂΩïÔºåÊ∑ªÂä†ËÆ§ËØÅ‰ø°ÊÅØ
            // Áî±‰∫éÊàë‰ª¨‰ΩøÁî®CookieËÆ§ËØÅÔºåÊµèËßàÂô®‰ºöËá™Âä®ÂåÖÂê´cookies
            
            return headers;
        }

        // ==================== ËÅäÂ§©ÂéÜÂè≤ËÆ∞ÂΩïÁõ∏ÂÖ≥ÂáΩÊï∞ ====================

        /**
         * Âä†ËΩΩÁî®Êà∑ËÅäÂ§©ÂéÜÂè≤ËÆ∞ÂΩï
         */
        async function loadChatHistory() {
            if (!currentUser) {
                console.log('Áî®Êà∑Êú™ÁôªÂΩïÔºåË∑≥ËøáÂä†ËΩΩÂéÜÂè≤ËÆ∞ÂΩï');
                return;
            }

            try {
                console.log('ÂºÄÂßãÂä†ËΩΩËÅäÂ§©ÂéÜÂè≤ËÆ∞ÂΩï...');
                
                const response = await fetch('/api/chat-history', {
                    method: 'GET',
                    credentials: 'include'
                });

                console.log('ÂéÜÂè≤ËÆ∞ÂΩïËØ∑Ê±ÇÁä∂ÊÄÅ:', response.status);

                if (response.ok) {
                    const data = await response.json();
                    console.log('ÂéÜÂè≤ËÆ∞ÂΩïÂìçÂ∫îÊï∞ÊçÆ:', data);
                    
                    if (data.success && data.history && data.history.length > 0) {
                        console.log('ÂáÜÂ§áÊòæÁ§∫ÂéÜÂè≤ËÆ∞ÂΩïÔºåÂÖ± ' + data.history.length + ' Êù°');
                        displayChatHistory(data.history);
                        console.log('ÂéÜÂè≤ËÆ∞ÂΩïÊòæÁ§∫ÂÆåÊàê');
                    } else {
                        console.log('Ê≤°ÊúâÊâæÂà∞ÂéÜÂè≤ËÆ∞ÂΩïÊàñÂéÜÂè≤ËÆ∞ÂΩï‰∏∫Á©∫ÔºåÊòæÁ§∫Ê¨¢ËøéÊ∂àÊÅØ');
                        showWelcomeMessage();
                    }
                } else {
                    const errorText = await response.text();
                    console.log('Êó†Ê≥ïÂä†ËΩΩÂéÜÂè≤ËÆ∞ÂΩï, HTTPÁä∂ÊÄÅÁ†Å:', response.status, 'ÈîôËØØ‰ø°ÊÅØ:', errorText);
                    showWelcomeMessage();
                }
            } catch (error) {
                console.error('Âä†ËΩΩËÅäÂ§©ÂéÜÂè≤Â§±Ë¥•:', error);
                showWelcomeMessage();
            }
        }

        /**
         * ÊòæÁ§∫ËÅäÂ§©ÂéÜÂè≤ËÆ∞ÂΩï
         * @param {Array} history - ÂéÜÂè≤ËÆ∞ÂΩïÊï∞ÁªÑ
         */
        function displayChatHistory(history) {
            console.log('ÂºÄÂßãÊòæÁ§∫ËÅäÂ§©ÂéÜÂè≤ËÆ∞ÂΩïÔºåÂÖ± ' + history.length + ' Êù°');
            
            // Áõ¥Êé•Ê∏ÖÁ©∫ËÅäÂ§©ÂÆπÂô®Ôºå‰∏ç‰øùÁïôÊ¨¢ËøéÊ∂àÊÅØ
            // Âõ†‰∏∫ÊúâÂéÜÂè≤ËÆ∞ÂΩïÊó∂‰∏çÂ∫îËØ•ÊòæÁ§∫Ê¨¢ËøéÊ∂àÊÅØ
            chatMessages.innerHTML = '';

            // ÊåâÊó∂Èó¥È°∫Â∫èÊòæÁ§∫ÂéÜÂè≤ËÆ∞ÂΩïÔºà‰ªéÊóßÂà∞Êñ∞Ôºâ
            history.reverse().forEach((record, index) => {
                if (record.message && record.response) {
                    console.log('ÊòæÁ§∫Á¨¨ ' + (index + 1) + ' Êù°ËÆ∞ÂΩï:', record.message.substring(0, 50) + '...');
                    // Ê∑ªÂä†Áî®Êà∑Ê∂àÊÅØ
                    addMessage('user', record.message, new Date(record.created_at), [], '');
                    // Ê∑ªÂä†AIÂìçÂ∫î
                    addMessage('assistant', record.response, new Date(record.created_at), [], '');
                }
            });

            // ÊªöÂä®Âà∞Â∫ïÈÉ®
            console.log('ËÅäÂ§©ÂéÜÂè≤ËÆ∞ÂΩïÊòæÁ§∫ÂÆåÊàêÔºåÊªöÂä®Âà∞Â∫ïÈÉ®');
            scrollToBottomSmooth();
        }

        /**
         * ÊòæÁ§∫Ê¨¢ËøéÊ∂àÊÅØ
         */
        function showWelcomeMessage() {
            chatMessages.innerHTML = '';
            const welcomeDiv = document.createElement('div');
            welcomeDiv.className = 'welcome-message';
            welcomeDiv.innerHTML = '<h2>Ê¨¢Ëøé‰ΩøÁî® NeoAI</h2><p>ÊàëÊòØÊÇ®ÁöÑÊô∫ËÉΩÂä©ÊâãÔºåÂèØ‰ª•ÂõûÁ≠îÈóÆÈ¢ò„ÄÅÂçèÂä©ÊÄùËÄÉÂíåÊèê‰æõ‰ø°ÊÅØ„ÄÇÊúâ‰ªÄ‰πàÊàëÂèØ‰ª•Â∏ÆÊÇ®ÁöÑÂêóÔºü</p>';
            chatMessages.appendChild(welcomeDiv);
        }

        /**
         * Ê∏ÖÈô§ËÅäÂ§©ÂéÜÂè≤Ôºà‰øùÁïôÊ¨¢ËøéÊ∂àÊÅØÔºâ
         */
        function clearChatHistory() {
            showWelcomeMessage();
        }
    </script>
</body>
</html>`;
